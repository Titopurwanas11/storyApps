const CACHE_VERSION="v3",CORE_CACHE="core-v3",MAP_CACHE="map-v3",ASSET_CACHE="asset-v3",CORE_ASSETS=["/","/index.html","/js/app.bundle.js","/offline.html","/manifest.json","/assets/icons/android-chrome-192x192.png","/assets/icons/android-chrome-512x512.png","/assets/icons/apple-touch-icon.png","/assets/icons/favicon-16x16.png","/assets/icons/favicon-32x32.png","/assets/icons/favicon.ico"],MAP_RESOURCES=["https://unpkg.com/leaflet@1.7.1/dist/leaflet.css","https://unpkg.com/leaflet@1.7.1/dist/leaflet.js","https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js","https://unpkg.com/leaflet.lazyload@1.0.0/Leaflet.LazyLoad.min.js","https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"];async function fetchAndCache(e,t){const s=await caches.open(t),a=await fetch(e);return a.ok&&await s.put(e,a.clone()),a}async function networkFirstWithCache(e,t){try{const s=await fetch(e);if(s.ok){const a=await caches.open(t);await a.put(e,s.clone())}return s}catch(t){return await caches.match(e)||Promise.reject(t)}}function offlineFallback(){return caches.match("/offline.html")}async function syncStories(){const e=await caches.open("asset-v3"),t=await Promise.all([fetch("/stories?size=10"),fetch("/stories/recent")]);await Promise.all(t.map((t=>{if(t.ok)return e.put(t.url,t)})))}self.addEventListener("install",(e=>{e.waitUntil(caches.open("core-v3").then((e=>(console.log("Caching core assets:",CORE_ASSETS),e.addAll(CORE_ASSETS)))).then((()=>self.skipWaiting())).catch((e=>{console.error("Service Worker install failed (addAll error):",e),console.error("Failed to cache the following core assets:"),Promise.allSettled(CORE_ASSETS.map((e=>fetch(e,{cache:"no-store"})))).then((e=>{e.forEach(((e,t)=>{const s=CORE_ASSETS[t];"rejected"===e.status?console.error(`- URL: ${s} (Network Error):`,e.reason):e.value&&!e.value.ok&&console.error(`- URL: ${s} (HTTP Error):`,e.value.status,e.value.statusText)}))})).finally((()=>{console.warn("Diagnosis fetch aset individual selesai. Periksa error spesifik di atas.")}))})))})),self.addEventListener("activate",(e=>{e.waitUntil(caches.keys().then((e=>Promise.all(e.map((e=>{if("core-v3"!==e&&"map-v3"!==e&&"asset-v3"!==e)return console.log("Deleting old cache:",e),caches.delete(e)}))))).then((()=>self.clients.claim())))})),self.addEventListener("fetch",(e=>{const{request:t}=e,s=new URL(t.url);"GET"===t.method&&(MAP_RESOURCES.some((e=>t.url.includes(e)))?e.respondWith(caches.match(t).then((e=>e||fetchAndCache(t,"map-v3")))):s.pathname.startsWith("/stories")?e.respondWith(networkFirstWithCache(t,"asset-v3")):CORE_ASSETS.includes(s.pathname)?e.respondWith(caches.match(t).then((e=>e||fetch(t)))):e.respondWith(networkFirstWithCache(t,"asset-v3").catch((()=>offlineFallback()))))})),self.addEventListener("push",(e=>{const t=e.data?.json()||{title:"New Story",options:{body:"A new story has been shared",icon:"/assets/icons/android-chrome-192x192.png"}};e.waitUntil(self.registration.showNotification(t.title,t.options))})),self.addEventListener("notificationclick",(e=>{e.notification.close(),e.waitUntil(self.clients.matchAll({type:"window"}).then((e=>e.length?e[0].focus():self.clients.openWindow("/"))))})),self.addEventListener("sync",(e=>{"sync-stories"===e.tag&&e.waitUntil(syncStories())}));